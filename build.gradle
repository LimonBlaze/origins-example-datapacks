plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "Ladysnake Libs"
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'net.adriantodt.fabricmc'
		}
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		url "https://jitpack.io"
	}
	maven {
		url "https://maven.shedaniel.me/"
	}
	maven {
		url "https://maven.terraformersmc.com/"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "com.github.apace100:origins-fabric:${project.origins_version}"
	//You may also add other dependencies like Origins:Classes
}

//Define the datapacks in the project, should locate at datapacks/[DATAPACK_DIR]
def datapacks = ['example_datapack', 'another_example_datapack']

//Duplicate files in datapacks, should be excluded when passing to resources
//Instead using resources/data/origins/origin_layers/origin.json to define origins being tested
//When using Origins:Classes, do the same thing to the origins-classes:class origin layer file
def excludedResources = ['pack.mcmeta', 'pack.png',
						 'data/origins/origin_layers/origin.json']

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}

	datapacks.each {def datapack ->
		from("/datapacks/${datapack}") {
			exclude excludedResources
		}
	}
}

datapacks.each {def datapack ->
	def fileName = project.properties.get(datapack + "_name")
	task "releaseDatapack-${datapack}" (type: Zip) {
		from "/datapacks/${datapack}"
		if(project.use_license.toBoolean()) {
			from("LICENSE")
		}
		destinationDir = file("out/${datapack}")
		archiveBaseName = fileName == null ? datapack : fileName
		archiveVersion = project.properties.get(datapack + "_version")
	}
}

//Release all datapacks as zip files to out/[datapackName]
task releaseDatapacks(dependsOn: tasks.matching { Task task -> task.name.startsWith("releaseDatapack-")})

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {

	}
}