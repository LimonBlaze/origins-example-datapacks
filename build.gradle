plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "Ladysnake Libs"
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'net.adriantodt.fabricmc'
		}
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		url "https://jitpack.io"
	}
	maven {
		url "https://maven.shedaniel.me/"
	}
	maven {
		url "https://maven.terraformersmc.com/"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "com.github.apace100:origins-fabric:${project.origins_version}"
}

def datapackDir = new File(rootProject.rootDir.absolutePath + "/datapacks")
def datapacks = datapackDir == null ? new ArrayList<>() :
		Arrays.stream(datapackDir.listFiles()).filter(File::isDirectory).toList()

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}

	for(File datapack : datapacks) {
		from(datapack.absolutePath) {
			exclude('pack.mcmeta')
		}
	}
}

task releaseDatapacks(type: Zip) {
	for(File datapack : datapacks) {
		from(datapack.absolutePath)
		if(project.use_license.toBoolean()) from("LICENSE")
		def fileName = project.properties.get(datapack.name + '_name')
		if(fileName == null) fileName = datapack.name
		destinationDir file('out/' + fileName)
		baseName "${fileName}"
		version project.properties.get(datapack.name + '_version')
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {

	}
}